<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ArchLinux安装与基本配置</title>
      <link href="/posts/acb4a0d4/"/>
      <url>/posts/acb4a0d4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>如果你不想折腾，直接上Manjaro，如果你喜欢折腾、有时间并且有一定的能力，Arch欢迎你</p><p>这篇教程来帮助那些想用Arch但是又害怕命令行的同学（Arch Wiki写得很详细，但其实对小白来说还是有难度）</p><p>因为截图很重要这里我按照YouTube上一个可靠教程来贴截图讲解</p><p>有条件的也可以直接去看 <a href="https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DQU0KRTgRJZU%26t%3D14s">YouTube原视频</a></p><p>我的CPU是Intel i5-8250U（x86_64）</p><p><strong>启动方式是UEFI而非BIOS（重要）</strong></p><p>显卡是UHD 620+NVIDIA MX150</p><p>安装Arch的硬盘是Samsang 970 EVO（NVME）</p><p>硬盘的类型最好确认一下，如果是NVMe的，先进BIOS修改 从硬盘的启动方式 为AHCI，否则你进入安装界面不会看到你的NVMe硬盘</p><p><strong>为确保一次成功，以下步骤（包括输入的命令）如果你不是很懂不要颠倒顺序，此外请保证安装时有顺畅的网络连接</strong></p><p><strong>因为EFI分区用的是windows的 而这个区还只有100MB 所以建议借助一些分区工具比如傲梅分区进入PE把这个区扩大 具体操作可以直接百度</strong></p><h2 id="0-下载ISO">0.下载ISO</h2><p><a href="https://link.zhihu.com/?target=https%3A//www.archlinux.org/download/">Arch Linux - Downloadswww.archlinux.org/download/</a></p><p>建议去下面找中国的镜像下</p><h2 id="1-硬盘分区">1.硬盘分区</h2><p>分区使用Windows的磁盘管理就行，没必要用DiskGenius</p><p>这里我使用的分区方案是 只额外分一个区来挂载 / 目录 EFI利用Windows的EFI分区</p><p>不使用swap分区 而是swap文件</p><p><img src="https://pic2.zhimg.com/80/v2-54e0ac602cbc3fca1859bc1f5ea6132d_720w.png" alt="img">这里分了250G</p><h2 id="2-制作启动U盘">2.制作启动U盘</h2><p>制作工具建议使用 <a href="https://link.zhihu.com/?target=https%3A//rufus.ie/">Rufus</a>，写入方式为DD而非ISO，选项那选择GPT而非默认的MBR</p><h2 id="3-BIOS的设置">3.BIOS的设置</h2><p>保持上一步制作好的启动U盘一直插着</p><p>开机出现品牌logo时狂按对应键进入BIOS设置比如我的Dell Inspiron就是F12</p><p>进去之后</p><p>1.禁用safeboot 2.如果你的硬盘是NVMe的，把 <strong>从硬盘的启动方式</strong> 改成 <strong>AHCI</strong></p><p>3.修改启动顺序，把U盘的启动顺序放到最上面（此处小心，不要delete任何东西）</p><p>完成之后退出重启</p><p>重启之后就是选择，回车进入arch iso</p><h2 id="4-检查网络">4.检查网络</h2><p>输入下面指令检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-2cce585de83d1c35149b117af9558de2_720w.jpg" alt="img"></p><p>这里用的是有线连接，如果你用的是无线连接需要按照下面的步骤连接到无线网：</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iwctl</span><br></pre></td></tr></table></figure><p>进入iwd模式，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">device list</span><br></pre></td></tr></table></figure><p>查看你的网卡名字，这里假设是wlan0，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">station wlan0 scan</span><br></pre></td></tr></table></figure><p>检查扫描网络，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">station wlan0 get-networks</span><br></pre></td></tr></table></figure><p>查看网络名字，假设名字叫BUPT-portal，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">station wlan0 connect BUPT-portal</span><br></pre></td></tr></table></figure><p>接着输入密码（如果有密码的话），输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>退出iwd模式</p><p>连接成功之后，检查可以连接到pacman源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -Syyy</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-da5d5bc2996a7b6990673c4c4700d77a_720w.png" alt="img">如图说明一切正常</p><p>重新设置mirrorlist（可选，建议）：</p><p>使用reflector来获取速度最快的6个镜像，并将地址保存至/etc/pacman.d/mirrorlist</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reflector -c China -a 6 --sort rate --save /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><h2 id="5-硬盘">5.硬盘</h2><p>1.检查硬盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-202971d782206ee00df4894348acf2b6_720w.jpg" alt="img"></p><p>这里没有看到之前划分好的空间，不要慌，那是因为之前只是划了空间，并没有建立分区</p><p>2.建立分区</p><p>因为之前划好的空间在nvme0n1上，所以执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfdisk /dev/nvme0n1</span><br></pre></td></tr></table></figure><p>这里以你个人情况而定 sda sdb 或是其他的</p><p><img src="https://pic2.zhimg.com/80/v2-49855cb185cf06755485c570310f0af1_720w.jpg" alt="img">这里我们就能看到最后有250G的Free Space</p><p><img src="https://pic2.zhimg.com/80/v2-d254c8449f527d10e724fe7b0c5cd465_720w.jpg" alt="img"></p><p>选择New 回车</p><p><img src="https://pic2.zhimg.com/80/v2-beb16fd18d81dc69d910bc0f9578cacd_720w.png" alt="img"></p><p>这里就输入250G 回车</p><p><img src="https://pic1.zhimg.com/80/v2-4c370c9718b302ed0774c8f2a9faad44_720w.jpg" alt="img"></p><p>选择Write 回车 输入 yes 回车</p><p>写入完成 选择Quit 回车退出</p><p>检查分区情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-553670cd4ee4b584a616078bc750c948_720w.jpg" alt="img">建立分区之后就可以看到分好的250G区</p><p>3.分区格式化</p><p>将刚刚分好的区格式化为ext4格式，这里认准分区号是nvme0n1p5</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/nvme0n1p5</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-311d75a2b56ac97898484f449341009b_720w.jpg" alt="img"></p><p>4.挂载分区</p><p>先挂载/分区，同样，这里分区号也是nvme0n1p5</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/nvme0n1p5 /mnt</span><br></pre></td></tr></table></figure><p>这里利用Windows的EFI分区，检查EFI分区号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-dcb17539e1c3938c74b377a65526001d_720w.jpg" alt="img">这里可以看到是nvme0n1p2</p><p>建立boot文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mnt/boot</span><br></pre></td></tr></table></figure><p>挂载EFI分区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/nvme0n1p2 /mnt/boot</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-265d33a99301d176fae47b6343311c1e_720w.jpg" alt="img"></p><h2 id="6-安装基本系统">6.安装基本系统</h2><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base linux linux-firmware nano</span><br></pre></td></tr></table></figure><p>等待安装完毕</p><p>（如果你不想用默认的内核，也可以使用linux-lts, linux-zen, linux-hardened，具体介绍请看<a href="https://link.zhihu.com/?target=https%3A//wiki.archlinux.org/index.php/kernel">Wiki</a>）</p><h2 id="7-生成fstab文件">7.生成fstab文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p>检查生成的fstab文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-bb67b920ff61eb7ea40d8c073bd15857_720w.jpg" alt="img"></p><p>如图说明一切正确</p><h2 id="8-正式配置新系统">8.正式配置新系统</h2><p>1.切换到装好的系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure><p>2.建立swapfile（建议，没有swap空间无法休眠）</p><blockquote><p>在 ext4 上使用 swapfile 的用户请注意，升级到 5.7.x 内核后可能出现诸如「kernel: swapon: swapfile has holes」这样的报错而无法启用 swapfile 。使用 dd 命令创建 swapfile （而非 fallocate） 可能可以解决问题，也可以回退 5.6 系列内核等待上游修复。<br>Arch Linux 错误跟踪：<a href="https://link.zhihu.com/?target=https%3A//bugs.archlinux.org/task/66921">https://bugs.archlinux.org/task/66921</a><br>内核错误跟踪：<a href="https://link.zhihu.com/?target=https%3A//bugzilla.kernel.org/show_bug.cgi%3Fid%3D207585">https://bugzilla.kernel.org/show_bug.cgi?id=207585</a></p></blockquote><p>如果之前安装的内核是linux-lts：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fallocate -l 2GB /swapfile</span><br></pre></td></tr></table></figure><p>注意：命令中是 <strong>小写字母l</strong> 而非 数字1 也非 字母i的大写</p><p>如果之前安装的内核不是linux-lts，这里创建swapfile需要使用dd命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/swapfile bs=2048 count=1048576 status=progress</span><br></pre></td></tr></table></figure><p>这里分了2G作为swapfile</p><p>改权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /swapfile</span><br></pre></td></tr></table></figure><p>建立swap空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkswap /swapfile</span><br></pre></td></tr></table></figure><p>激活swap空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon /swapfile</span><br></pre></td></tr></table></figure><p>修改/etc/fstab文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/fstab</span><br></pre></td></tr></table></figure><p>到文件末尾输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/swapfile none swap defaults 0 0</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-32f9a86a9806695b1a4c6d94c79d25e3_720w.jpg" alt="img"></p><p>保存退出</p><p>3.设置时区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><p>同步硬件时钟</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure><p>4.设置locale</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/locale.gen</span><br></pre></td></tr></table></figure><p>Ctrl+W 输入 #en_US 回车 找到UTF-8那一行 删掉前面的#（取消注释）</p><p>Ctrl+W 输入 #zh_CN 回车 找到UTF-8那一行 删掉前面的#（取消注释）</p><p>保存退出</p><p>生成locale</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locale-gen</span><br></pre></td></tr></table></figure><p>创建并写入/etc/locale.conf文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/locale.conf </span><br></pre></td></tr></table></figure><p>填入内容，注意这里只能填这个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><p>5.创建并写入hostname</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/hostname</span><br></pre></td></tr></table></figure><p>这里我写入的是 arch 作为hostname，你也可以输别的</p><p><img src="https://pic2.zhimg.com/80/v2-c6f62d0bf545ebaa952a1746cd7668ad_720w.png" alt="img"></p><p>保存退出</p><p>6.修改hosts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/hosts</span><br></pre></td></tr></table></figure><p>写入内容如图（中间的空白用tab而非空格），arch替换为你之前在hostname里写入的内容，其他都按照图里面的写（注意最后一行的ip是127.0.1.1）</p><p><img src="https://pic3.zhimg.com/80/v2-54fc38004dc15b76d68983a78e59928a_720w.jpg" alt="img"></p><p>保存退出</p><p>建议上述编辑的内容都用cat输出检查一下</p><p>7.为root用户创建密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>然后输入并确认密码（linux终端的密码没有回显，输完直接回车就好）</p><p>8.创建启动器</p><p>安装基本的包，这里使用grub为启动器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S grub efibootmgr networkmanager network-manager-applet dialog wireless_tools wpa_supplicant os-prober mtools dosfstools ntfs-3g base-devel linux-headers reflector git sudo</span><br></pre></td></tr></table></figure><p><strong>如果你不知道这些包的作用，请务必确保输入的指令与上面的一致</strong></p><p>检查完毕回车，需要选择直接回车就好，等待安装结束</p><p>如果你是intel的cpu，需要安装intel的微码文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S intel-ucode</span><br></pre></td></tr></table></figure><p>如果是amd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S amd-ucode</span><br></pre></td></tr></table></figure><hr><p>2021.06.16更新：</p><blockquote><p>Grub 2.06 更新 os-prober 用户需要手动干预</p><p>grub 2.06 更新已经进入官方源，本次更新有以下两个需要注意的变化：<br>\1. 如果您正在使用 os-prober 生成其他系统的引导项，grub 2.06 不再自动启用 os-prober，您需要添加 GRUB_DISABLE_OS_PROBER=false 至 /etc/default/grub 配置文件中并且重新运行 grub-mkconfig<br>\2. grub 2.06 现在会自动添加 固件设置菜单 引导项目，无需手动创建</p></blockquote><p>鉴于此需要手动启用os-prober来确保Windows能被正确识别：</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/default/grub</span><br></pre></td></tr></table></figure><p>在里面找一条空行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_DISABLE_OS_PROBER=false</span><br></pre></td></tr></table></figure><p>之后Ctrl-X 加Y回车保存退出</p><p><img src="https://pic4.zhimg.com/80/v2-405f1485261b0213aceef88ca833909b_720w.jpg" alt="img"></p><p>完成之后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=Arch</span><br></pre></td></tr></table></figure><p>确保输入指令完全正确回车</p><p><img src="https://pic3.zhimg.com/80/v2-9a43ea86f2ab93b70b53549d3ee84c52_720w.png" alt="img"></p><p>生成grub.cfg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>完成之后如图</p><p><img src="https://pic3.zhimg.com/80/v2-de2e93e62d337ba61654e02001a1f226_720w.jpg" alt="img"></p><h2 id="9-退出新系统并取消挂载">9.退出新系统并取消挂载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-240ca9989b005714cdeaf20e85c7340d_720w.jpg" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount -a</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-e87ae5d5e79da0247e93cf2e19e3bc50_720w.jpg" alt="img"></p><p>重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>启动时请拔出u盘</p><h2 id="10-进入装好的Arch系统并激活网络">10.进入装好的Arch系统并激活网络</h2><p>进去之后 先输入 root 回车 输入密码 回车</p><p>启动网络服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable --now NetworkManager</span><br></pre></td></tr></table></figure><p>设置WiFi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmtui</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-3be8707847310be9f8f8d86de0799c8f_720w.jpg" alt="img"></p><p>回车</p><p><img src="https://pic1.zhimg.com/80/v2-8e0546e1ea798ec7f146f4a05924e28c_720w.jpg" alt="img"></p><p>选择你要连接到的WiFi 输入密码 回车 然后退出</p><h2 id="11-新建用户并授权">11.新建用户并授权</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -G wheel mir</span><br></pre></td></tr></table></figure><p>wheel后面是你的用户名，这里输入的是mir</p><p>为用户创建密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd mir</span><br></pre></td></tr></table></figure><p>输入并确认密码</p><p>授权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EDITOR=nano visudo</span><br></pre></td></tr></table></figure><p>Ctrl+W 输入 # %wheel 回车 找到这行 删除前面的 #（取消注释）</p><p><img src="https://pic1.zhimg.com/80/v2-8aaf436214afc9aaefbee330f96f4690_720w.jpg" alt="img"></p><p>保存退出</p><h2 id="12-安装显卡驱动">12.安装显卡驱动</h2><p>安装AMD集显驱动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S xf86-video-amdgpu</span><br></pre></td></tr></table></figure><p>安装NVIDIA独显驱动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S nvidia nvidia-utils</span><br></pre></td></tr></table></figure><h2 id="13-安装Display-Server">13.安装Display Server</h2><p>这里用的是开源世界最为流行的xorg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S xorg</span><br></pre></td></tr></table></figure><p>出现选择直接回车即可</p><h2 id="14-安装Display-Manager">14.安装Display Manager</h2><p>这里需要按你要安装的桌面环境而定，这里没有列出的可以自己去ArchWiki查</p><p>Gnome：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S gdm</span><br></pre></td></tr></table></figure><p>KDE：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S sddm</span><br></pre></td></tr></table></figure><p>Xfce || DDE：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S lightdm lightdm-gtk-greeter</span><br></pre></td></tr></table></figure><p>设置开机自动启动，以gdm为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable gdm</span><br></pre></td></tr></table></figure><p>如果是别的请将这里的gdm替换为你安装的那个dm</p><h2 id="15-安装Desktop-Environment">15.安装Desktop Environment</h2><p>Gnome：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S gnome</span><br></pre></td></tr></table></figure><p>KDE：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S plasma kde-applications packagekit-qt5</span><br></pre></td></tr></table></figure><p>Xfce：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S xfce4 xfce4-goodies</span><br></pre></td></tr></table></figure><p>DDE：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S deepin deepin-extra</span><br></pre></td></tr></table></figure><p>同样 需要选择时直接回车</p><h2 id="16-添加archlinuxcn源">16.添加archlinuxcn源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/pacman.conf</span><br></pre></td></tr></table></figure><p>在最后加上下面两行（我这里使用了北外的镜像站）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.bfsu.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure><p>同时取消对multilib源的注释</p><p><img src="https://pic3.zhimg.com/80/v2-5519f934341533ce81fdff7259b0e9d6_720w.jpg" alt="img"></p><p>保存退出之后同步并安装archlinuxcn-keyring</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -Syu &amp;&amp; pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><p>最后不要忘记安装中文的字体，如果这一步不装进去图形界面之后还是要装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S ttf-sarasa-gothic noto-fonts-cjk</span><br></pre></td></tr></table></figure><p>我这里安装的是更纱黑体和noto cjk，包比较大，耐心等待安装完毕。</p><p>最后重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>在grub界面选择archlinux回车</p><p>当你看到登录界面时，恭喜你，一个相对完整的Arch安装完毕，Enjoy it！</p><hr><p>进一步配置可以看看专栏前面那篇Manjaro-KDE的配置，装点常用的软件，大体上就能用了，然后根据自己的情况配配显卡驱动，就差不多能玩游戏了</p><p>关于N卡的启用与切换，建议使用<a href="https://link.zhihu.com/?target=https%3A//github.com/Askannz/optimus-manager">optimus-manager</a>（其他方案我都试过不好使</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S optimus-manager</span><br></pre></td></tr></table></figure><p>没有DE只有一个Bspwm 这是我的dotfiles：</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/MiraculousMoon/bspwm-dotfiles.git">Dracula&amp;Nord Dotfilesgithub.com/MiraculousMoon/bspwm-dotfiles.git</a></p><p>此外还有i3wm的：</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/ayamir/i3-dotfiles">https://github.com/ayamir/i3-dotfilesgithub.com/ayamir/i3-dotfiles</a></p><p>dwm的：</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/ayamir/dwm-dotfiles">https://github.com/ayamir/dwm-dotfilesgithub.com/ayamir/dwm-dotfiles</a></p><p>spectrwm，xmonad，sway的：</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/ayamir/nord-and-light">https://github.com/ayamir/nord-and-lightgithub.com/ayamir/nord-and-light</a></p><p>最后多说一句，如果你装完了，就要意识到自己拥有了Arch WiKi（世界上最好的WiKi之一），这也是Arch用户令人羡慕的一点。遇到问题先找Arch WiKi，再去找别的资料</p>]]></content>
      
      
      <categories>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统知识点复习</title>
      <link href="/posts/b0779f98/"/>
      <url>/posts/b0779f98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1>操作系统复习</h1><h2 id="第一章">第一章</h2><p>并发、并行、系统调用、用户态、核心态等概念的含义及理解</p><h3 id="1、基本特征">1、基本特征</h3><ol><li>并发：两个或多个活动在<strong>同一给定的时间间隔</strong>中进行。（并行：两个和多个活动在<strong>同一时刻</strong>发生）</li><li>共享：计算机系统中的资源被多个进程所共用。</li><li>异步：进程以不可预知的速度向前推进。</li><li>虚拟：把一个物理的实体变为若干个逻辑上的对应物。</li></ol><h3 id="2、主要功能">2、主要功能</h3><ol><li>处理机管理</li><li>存储器管理</li><li>文件管理</li><li>设备管理</li></ol><h3 id="3、重要概念">3、重要概念</h3><h4 id="两种指令">两种指令</h4><ol><li>特权指令</li><li>非特权指令</li></ol><h4 id="两种程序">两种程序</h4><ol><li>内核程序</li><li>应用程序</li></ol><h4 id="处理机状态">处理机状态</h4><ol><li>用户态（目态）</li><li>核心态（管态）</li><li>用户态到核心态：通过中段</li><li>核心态到用户态：特权指令PSW的标志为0用户态1核心态。</li></ol><h4 id="系统调用">系统调用</h4><p>系统给程序员提供的唯一接口，可获得OS的服务。在用户态发生，核心态处理。</p><h2 id="第二章">第二章</h2><h3 id="1、进程概念的理解，进程基本状态转换图及转换原因">1、进程概念的理解，进程基本状态转换图及转换原因</h3><h4 id="进程的定义">进程的定义</h4><p>进程是计算机中程序关于<strong>某数据集合上的一次运行活动</strong>，是系统进行<strong>资源分配和调度</strong>的<strong>基本</strong>单位。</p><h4 id="进程的组成">进程的组成</h4><ul><li>PCB：进程存在的<strong>唯一标志</strong></li><li>程序段：能被进程调度到CPU的代码</li><li>数据段</li></ul><h4 id="进程的状态">进程的状态</h4><h5 id="1、状态的种类">1、状态的种类</h5><ol><li>运行态</li><li>就绪态</li><li>阻塞态</li><li>创建状态</li><li>结束状态</li></ol><h5 id="2、状态的转换">2、状态的转换</h5><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/bg/%E8%BF%9B%E7%A8%8B%E8%BD%AC%E6%8D%A2%E5%9B%BE.png" alt="进程转换图"></p><h5 id="3、转换原因">3、转换原因</h5><ul><li>就绪态-&gt;运行态：处于就绪态的进程被调度后，获得处理机资源</li><li>运行态-&gt;就绪态：时间片用完或在可剥夺系统中有更高级的进程进入</li><li>运行态-&gt;阻塞态：进程需要的某一资源没有准备好</li><li>阻塞态-&gt;就绪态：进程等待的事件到来</li></ul><h3 id="2、进程并发运行的实质">2、进程并发运行的实质</h3><ul><li>并发的实质是<strong>一个处理器在几个进程之间的多路复用</strong>，并发是对有限的物理资源强制行使多用户共享，消除计算机部件之间的互等现象，以提高系统资源利用率。</li></ul><h3 id="3、常见调度算法的运行原则">3、常见调度算法的运行原则</h3><ol><li>先来先服务</li><li>短作业优先</li><li>最短剩余时间优先</li><li>高响应比优先</li><li>静态优先级</li><li>时间片轮转</li></ol><h2 id="第三章">第三章</h2><h3 id="1、进程同步或互斥的解决方案">1、进程同步或互斥的解决方案</h3><h4 id="1、基本概念">1、基本概念</h4><p>互斥：是指某一资源同时只允许一个访问者对其进行访问，具有<strong>唯一性和排它性</strong>。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。</p><p>同步：是指在互斥的基础上（大多数情况），通过其它机制实现访问者对资源的有序访问。在大多数情况下，同步已经实现了互斥，特别是所有写入资源的情况必定是互斥的。少数情况是指可以允许多个访问者同时访问资源</p><p>临界资源：一次仅允许一个进程使用的资源</p><p>临界区：在每个进程中访问临界资源的那段程序。</p><h3 id="2、解决互斥问题应遵循的四个准则和基本方法">2、解决互斥问题应遵循的四个准则和基本方法</h3><ol><li><h6 id="空闲让进：如果有多个进程要求进入空闲的临界区，一次只允许一个进程进入">空闲让进：如果有多个进程要求进入空闲的临界区，一次只允许一个进程进入</h6></li><li><h6 id="忙则等待：任何时候，进入临界区的进程不可多余一个。如已有进程进入自己的临界区，则其它所有试图进入自己临界区的进程必须等待">忙则等待：任何时候，进入临界区的进程不可多余一个。如已有进程进入自己的临界区，则其它所有试图进入自己临界区的进程必须等待</h6></li><li><h6 id="有限等待：进入临界区的进程要在有限的时间内退出，以便其它进程能及时的进入自己的临界区。">有限等待：进入临界区的进程要在有限的时间内退出，以便其它进程能及时的进入自己的临界区。</h6></li><li><h6 id="让权等待-：如果进程不能进入自己的临界区，则应让出CPU，避免进程出现“忙等”现象">让权等待 ：如果进程不能进入自己的临界区，则应让出CPU，避免进程出现“忙等”现象</h6></li></ol><h3 id="3、用信号量解决基本的进程同步或互斥问题">3、用信号量解决基本的进程同步或互斥问题</h3><p>暂时留空</p><h3 id="4、死锁">4、死锁</h3><h4 id="1、死锁的含义">1、死锁的含义</h4><p>多个进程因竞争资源而造成的一种僵局，如果没有外力，这些进程将无法推进</p><h4 id="2、死锁的产生原因">2、死锁的产生原因</h4><p>非剥夺资源的竞争和进程的不恰当推进顺序</p><h4 id="3、死锁产生的必要条件">3、死锁产生的必要条件</h4><ol><li><strong>互斥条件</strong>：进程要求对所分配的资源进行排它性控制，即在一段时间内某资源仅为一进程所占用。</li><li><strong>请求和保持条件</strong>：当进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li><strong>不剥夺条件</strong>：进程已获得的资源在未使用完之前，不能剥夺，只能在使用完时由自己释放。</li><li><strong>环路等待条件</strong>：在发生死锁时，必然存在一个进程–资源的环形链。</li></ol><h4 id="4、死锁的具体解决方案">4、死锁的具体解决方案</h4><h5 id="1、预防死锁">1、预防死锁</h5><ul><li>破坏互斥条件</li><li>破坏不可剥夺条件</li><li>破坏请求和保持条件</li><li>破换循环等待条件</li></ul><h5 id="2、避免死锁">2、避免死锁</h5><ul><li>安全状态：系统在进行资源分配之前<strong>预先计算资源分配的安全性</strong>。若此次分配不会导致系统进入不安全的状态，则将资源分配给进程；否则，进程等待。其中最具有代表性的避免死锁算法是银行家算法。</li><li>银行家算法：首先需要定义状态和安全状态的概念。系统的状态是当前给进程分配的资源情况。因此，状态包含两个向量Resource（系统中每种资源的总量）和Available（未分配给进程的每种资源的总量）及两个矩阵Claim（表示进程对资源的需求）和Allocation（表示当前分配给进程的资源）。安全状态是指至少有一个资源分配序列不会导致死锁。当进程请求一组资源时，假设同意该请求，从而改变了系统的状态，然后确定其结果是否还处于安全状态。如果是，同意这个请求；如果不是，阻塞该进程知道同意该请求后系统状态仍然是安全的。</li></ul><h5 id="3、检测死锁">3、检测死锁</h5><p>利用死锁原理：</p><ol><li>首先为每个进程和每个资源指定一个唯一的号码；</li><li>然后建立资源分配表和进程等待表。</li></ol><h5 id="4、解除死锁">4、解除死锁</h5><ul><li>资源剥夺法</li><li>撤销进程法</li><li>进程回退法</li></ul><h2 id="第四章">第四章</h2><h3 id="1、各种存储管理方案的基本原理及特点">1、各种存储管理方案的基本原理及特点</h3><h4 id="1、连续分配管理方式">1、连续分配管理方式</h4><ul><li>单一连续分配：分配到内存的固定区域</li><li>固定分区分配：分配到内存不同的固定区域、分区可以相等可以不等。</li><li>动态分区分配:按照程序的需要进行动态的划分。首次适应算法、最佳适应算法、最坏适应算法、邻近适应算法。</li></ul><h4 id="2、非连续分配管理方式">2、非连续分配管理方式</h4><ul><li>基本分页式存储管理</li><li>基本分段式存储管理</li><li>段页式</li></ul><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/bg/image-20220110202301849.png"  /><h3 id="2、不同存储管理方案的地址变换，逻辑地址到物理地址的转换">2、不同存储管理方案的地址变换，逻辑地址到物理地址的转换</h3><h3 id="3、虚拟存储器的定义理解和特征">3、虚拟存储器的定义理解和特征</h3><h4 id="定义理解">定义理解</h4><ul><li>虚拟存储器是用户能作为可编址内存对待的虚拟存储空间，它使用户逻辑存储器与物理存储器分离，是操作系统给用户提供的一个比真实内存空间大得多的地址空间。就是说，虚拟存储器并不是实际的内存，它的大小比内存空间大得多；用户感觉所能使用的“内存”非常大，这是操作系统对逻辑内存的扩充。</li></ul><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/bg/20220110200356.png" alt=""></p><h4 id="特征">特征</h4><ol><li><strong>虚拟扩充</strong>:虚拟存储器不是扩大物理内存空间，而是扩充逻辑内存容量。</li><li><strong>部分装入</strong>:每个进程不是全部一次性地装入内存，而是分成若干部分。当进程要执行时，只需将当前运行需要用到的那部分程序和数据装入内存。以后在运行过程中用到其他部分时，再分别把那些部分从外存调入内存。</li><li><strong>离散分配</strong>:一个进程分成多个部分，它们没有被全部装入内存。即使装入内存的那部分也不必占用连续的内存空间。</li><li><strong>多次对换</strong>:在一个进程运行期间，它所需的全部程序和数据分成多次调入内存。</li></ol><h3 id="4-、常见页面置换算法的置换原则和缺页率的计算">4 、常见页面置换算法的置换原则和缺页率的计算</h3><p><a href="https://blog.csdn.net/qq_44096670/article/details/120006446">页面置换算法（OPT、FIFO、LRU、CLOCK、改进的时钟置换算法）</a></p><h4 id="1、最佳置换算法（OPT）">1、最佳置换算法（OPT）</h4><p>每次选择<strong>淘汰的页面</strong>将是<strong>以后永不使用</strong>，或者<strong>在最长时间内不再被访问的页面</strong>，这样可以保证最低的缺页率。</p><h4 id="2、先进先出置换算法（FIFO）">2、先进先出置换算法（FIFO）</h4><p>每次选择<strong>淘汰的页面</strong>是<strong>最早进入内存的页面</strong></p><h4 id="3、最近最久未使用置换算法（LRU）">3、最近最久未使用置换算法（LRU）</h4><p>每次<strong>淘汰的页面</strong>是<strong>最近最久未使用的页面</strong></p><h4 id="4、时钟置换算法（CLOCK）">4、时钟置换算法（CLOCK）</h4><h4 id="5、改进的时钟置换算法">5、改进的时钟置换算法</h4><h2 id="第五章">第五章</h2><h3 id="1、设备控制方式">1、设备控制方式</h3><p><a href="https://blog.csdn.net/weixin_45792450/article/details/109486061">设备控制方式</a></p><h4 id="1、程序直接控制方式">1、程序直接控制方式</h4><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/bg/image-20220110204420505.png" alt=""></p><h4 id="2、中断控制方式">2、中断控制方式</h4><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/bg/image-20220110204449071.png" alt=""></p><h4 id="3、DMA控制方式">3、DMA控制方式</h4><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/bg/image-20220110204527079.png" alt=""></p><h4 id="4、IO通道控制方式">4、IO通道控制方式</h4><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/bg/image-20220110204545329.png" alt=""></p><h3 id="2、缓冲区的作用">2、缓冲区的作用</h3><p>1、缓和CPU与外设间<strong>速度不匹配的矛盾</strong></p><p>2、提高CPU与外设之间的<strong>并行性</strong></p><p>3、<strong>减少</strong>对CPU的中断次数</p><h3 id="3、缓冲区的类型">3、缓冲区的类型</h3><p>1、单缓冲：当数据<strong>到达率与离去率相差很大时</strong>，可采用单缓冲方式</p><p>2、双缓冲：当信息<strong>输入和输出率相同</strong>，可利用双缓冲区，实现两者的并行</p><p>3、多缓冲：对于<strong>阵发性的输入、输出</strong>，为了解决速度不匹配的问题，可以设立多个缓冲区</p><h3 id="4、磁盘访问时间的组成">4、磁盘访问时间的组成</h3><ul><li>寻道时间</li><li>旋转延迟时间</li><li>传输时间</li></ul><h3 id="5、常见的磁盘调度算法">5、常见的磁盘调度算法</h3><p>1、先到先服务算法（FCFS）</p><p>2、最短查找时间优先算法（SSTF）</p><p>3、扫描算法（SCAN）</p><p>4、循环扫描算法（CSCAN）</p><h2 id="第六章">第六章</h2><h3 id="1、文件的目录结构">1、文件的目录结构</h3><ul><li>单击目录</li><li>二级目录</li><li>树形目录</li><li>树形目录</li></ul><h3 id="2、文件的物理结构">2、文件的物理结构</h3><p>1、连续文件结构（连续分配方式）</p><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/bg/image-20220110214754930.png" alt=""></p><p>2、串联文件结构（链接分配方式）</p><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/bg/image-20220110214821418.png" alt=""></p><p>3、索引文件结构（索引分配方式）</p><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/bg/image-20220110214848194.png" alt=""></p><h3 id="3、文件的逻辑结构">3、文件的逻辑结构</h3><p>1、无结构文件</p><p>2、有结构文件</p><ul><li>顺序文件</li><li>索引文件</li><li>索引顺序文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统算法题</title>
      <link href="/posts/405b8622/"/>
      <url>/posts/405b8622/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1>操作系统算法题</h1><ol><li><a href="https://blog.csdn.net/u011080472/article/details/51206332#22-%E5%85%88%E8%BF%9B%E5%85%88%E5%87%BA%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95first-in-first-out-fifo">缺页置换问题</a></li><li><a href="https://blog.csdn.net/weixin_43767668/article/details/112798201?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.pc_relevant_paycolumn_v2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.pc_relevant_paycolumn_v2&amp;utm_relevant_index=2">已知逻辑地址求物理地址</a></li><li><a href="https://blog.csdn.net/weixin_43257886/article/details/106261207?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164171255416781683980666%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164171255416781683980666&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-106261207.pc_search_insert_ulrmf&amp;utm_term=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95&amp;spm=1018.2226.3001.4187">银行家算法</a></li><li><a href="https://blog.csdn.net/qq_40212930/article/details/105393493?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164171460816780255287770%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164171460816780255287770&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-4-105393493.pc_search_insert_ulrmf&amp;utm_term=%E7%A3%81%E7%9B%98%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95+&amp;spm=1018.2226.3001.4187#commentBox">磁盘调度算法</a></li><li><a href="https://blog.csdn.net/ganghaodream/article/details/106317379">作业调度算法</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第四章 网络层（2）</title>
      <link href="/posts/853f8cb2/"/>
      <url>/posts/853f8cb2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1>计算机网络第四章 网络层（2）</h1><h2 id="网络层的路由">网络层的路由</h2><h3 id="路由是什么？">路由是什么？</h3><ul><li>路由是指分组从源到目的地时，决定端到端路径的网络范围的进程。路由是指导报文转发的路径信息，通过路由可以确认转发IP报文的路径</li><li>路由是网络层最主要的工作任务</li></ul><h3 id="路由器">路由器</h3><ul><li>网络层的基础设备</li><li>数据转发</li><li>一个端口代表一个网段，路由器中存放着通往各个网段的表格，叫做路由表</li></ul><h3 id="路由表">路由表</h3><ul><li>又称路由择域信息库，是一个存储在路由器或者联网计算机中的电子表格（文件）或者类数据库。路由表存储着指向特定网络地址的路径</li></ul><h3 id="网关">网关</h3><ul><li>又称网间连接器，协议转换器。用于两个高层协议不同的网络互连。网关既可以用于广域网互连，也可以用于局域网互连</li></ul><h3 id="路由获取方式">路由获取方式</h3><ul><li>直连路由</li><li>静态路由</li><li>动态路由</li></ul><h3 id="路由器的配置方式">路由器的配置方式</h3><h4 id="静态路由">静态路由</h4><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/bg/image-20220108142456234.png" alt=""></p><ul><li>静态路由：由管理员手工配置，配置方便，对系统要求低，适用于拓扑结构简单稳定的小型网络</li><li>缺省路由：是一种特殊的路由，当报文没有在路由表中找到匹配的具体表项时才能使用的路由。</li></ul><h4 id="动态路由">动态路由</h4><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/bg/image-20220108142832081.png" alt=""></p><ul><li>通过动态路由协议来实现不同网段的路由互通</li><li>动态路由协议有自己的路由算法，能够自动适应网络拓扑的变化，适用于具有一定数量的三层设备的网络</li></ul><h5 id="动态路由协议">动态路由协议</h5><h6 id="RPI（路由信息协议）">RPI（路由信息协议）</h6><ul><li>基于<strong>矢量</strong>（跳数）的动态路由协议</li><li>适用于<strong>中小规模</strong>的网络拓扑，最大跳数为<strong>15</strong></li></ul><h6 id="OSPF（开放式最短路径优先）">OSPF（开放式最短路径优先）</h6><ul><li>基于<strong>链路状态</strong>的路由</li><li>使用SPF算法，计算<strong>最短路径</strong>。树形协议</li><li>避免环路生成</li></ul><h6 id="BGP">BGP</h6><ul><li>BGP是自治系统间的路由协议。自治系统之间的路由协议</li><li>自治系统间的路由协议</li></ul><h6 id="IS-IS（内部网关协议）">IS-IS（内部网关协议）</h6><ul><li>IS-IS：中间系统到中间系统</li><li>与OSPF类似，IS-IS是基于路由路划分区域，OSPF利用接口划分</li></ul><h5 id="RIP和OSPF的区别">RIP和OSPF的区别</h5><ul><li>RIP是基于矢量的协议，OSPF是基于链路状态。</li><li>RIP适用于中小型网络拓扑，OSPF适用于较大规模的网络。</li><li>OSPF支持可变长度子网掩码（VLSM）。RIP不支持。</li><li>OSPF的收敛速度比RIP更加的迅速。</li><li>OSPF可以防止环路的形成。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 网路层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第四章 网络层（1）</title>
      <link href="/posts/978a235c/"/>
      <url>/posts/978a235c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1>计算机网络第四章 网络层（1）</h1><h2 id="网络层的的作用">网络层的的作用</h2><ul><li><p>提供<strong>端到端</strong>的服务 单位：<strong>分组</strong></p></li><li><p>网络层的目的是实现<strong>两个端系统之间的数据透明传输</strong>，具体功能包括寻址和路由选择，连接的建立，保持和终止等。它提供的服务使传输层不需要了解网络中的数据传输和交换技术。</p></li></ul><h2 id="网络层协议IP">网络层协议IP</h2><ul><li>APR地址解析协议：根据IP地址获取物理地址</li><li>PARP反地址解析协议</li><li>ICMP网际控制报文协议：通过ICMP传输控制消息，控制消息是指网络通不通，主机是否可达，路由是否可用等网络本身的消息。（Ping）</li><li>IGMP网际组管理协议：适用于管理协议<strong>多播组成员</strong>的一种通信协议。IP主机和相邻路由器利用IGMP来创建多播组的组成员。组播方式解决了单播情况下数据的重复拷贝及带宽的重复占用，也解决了广播方式下带宽资源的浪费</li></ul><h2 id="IP地址">IP地址</h2><h3 id="IP地址的概念">IP地址的概念</h3><ul><li>IP地址：IP地址使IP协议提供的一种统一的地址格式，他为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。</li><li>组成：一个IP地址由<strong>4个字节</strong>组成，<strong>32</strong>位组成，一般用<strong>点分十进制</strong>的表示。</li></ul><h3 id="IP地址和MAC地址的区别">IP地址和MAC地址的区别</h3><ol><li>IP地址是一个逻辑地址，MAC地址是物理地址。</li><li>MAC地址是<strong>唯一</strong>的，IP地址<strong>不是唯一</strong>的。</li><li>MAC地址主要工作在数据链路层，IP地址工作在网络层。</li><li>MAC地址是48位的，IP地址一般是32位的（IPv6是128位的）。</li><li>IP地址的分配取决于网络拓扑，MAC地址的分配取决于制造商。</li></ol><h3 id="IP地址的组成">IP地址的组成</h3><ul><li>主机号和网络地址组成</li><li>主机地址/主机号：标识某一台设备的地址。</li><li>网络地址/网络号：标识某一个网段的地址。</li><li>子网掩码：用于区分网络号和主机号。它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只能有一个作用，就是将某一个IP地址划分成为网络地址和主机地址两部分</li></ul><h3 id="IP地址的分类">IP地址的分类</h3><ul><li><p>A类：前一位为0，范围是0~127。其中0代表任何地址，<strong>127为回环测试地址</strong>，因此，A类ip地址的实际范围是<strong>1-126</strong>.<br>默认<a href="https://so.csdn.net/so/search?q=%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81">子网掩码</a>为255.0.0.0</p></li><li><p>B类：前两位为10，范围是128~191。</p></li><li><p>C类：前三位为110，范围是192～223。</p></li><li><p>D类：多播地址。</p></li><li><p>E类地址：保留为今后使用。</p></li><li><p>特殊地址：主机号<strong>全为0的网络号</strong>、主机号<strong>全为1的广播号</strong>和<strong>回环地址</strong>不可用。</p></li></ul><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/img/20190705095636130.png" alt="IP地址分类" style="zoom: 67%;" />]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 网路层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRC循环冗余校验</title>
      <link href="/posts/6b440cde/"/>
      <url>/posts/6b440cde/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="例题1：要发送的数据为1101-011011，采用CRC的生成多项式是P（x）-x-4-x-1-求余数。"><strong>例题1：要发送的数据为1101 011011，采用CRC的生成多项式是P（x）=x^4+x+1.求余数。</strong></h3><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/img/Screenshot_20220107_174751.jpg" alt=""></p><h3 id="例题2：要发送的数据为101110，采用CRC的生成多项式是P（x）-x-3-1-求余数。"><strong>例题2：要发送的数据为101110，采用CRC的生成多项式是P（x）=x^3+1.求余数。</strong></h3><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/img/QQ%E5%9B%BE%E7%89%8720220107175125.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 计算题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第三章 数据链路层（2）</title>
      <link href="/posts/86388df2/"/>
      <url>/posts/86388df2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1>计算机网络第三章 数据链路层（2）</h1><h2 id="数据链路层的通信协议">数据链路层的通信协议</h2><h3 id="冲突域和广播域">冲突域和广播域</h3><p><strong>1.冲突域</strong></p><ul><li>交换机的每一个端口都是一个冲突域；冲突域只能发生在一个网段</li></ul><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/img/image-20220107161843782.png" style="zoom: 80%;" /><p><strong>2.广播域</strong></p><ul><li>交换机的所有端口都在一个广播域；广播域在一个或多个网段内发生</li></ul><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/img/image-20220107161651498.png" style="zoom: 67%;" /><h3 id="虚拟局域网VLAN">虚拟局域网VLAN</h3><h4 id="优点和目地">优点和目地</h4><ul><li><p>划分广播域</p></li><li><p>增强局域网的安全性</p></li><li><p>提高健壮性</p></li><li><p>灵活构建工作组</p></li></ul><h4 id="划分VLAN的方式">划分VLAN的方式</h4><h5 id="基于端口">基于端口</h5><ol><li>Access:只允许通过一个VLAN</li><li>Trunk：允许通过多个VLAN</li><li>hybird</li></ol><h5 id="基于子网">基于子网</h5><ul><li>配置好子网域VLAN映射表，如果交换设备收到的是untagged（不带VLAN标签）帧，交换设备根据报文中的源IP地址信息，确认添加的VLAN iD。将指定网段或IP地址发出的报文在指定的VLAN中传输，减轻了网络管理着的任务量，且有利于管理</li></ul><h5 id="基于MAC地址">基于MAC地址</h5><ul><li>先配置好MAC地址和VLAN映射关系表，当终端用户的物理位置发生改变，不需要重新配置VLAN。提高了终端用户的安全性和接入的灵活性</li></ul><h5 id="基于匹配策略">基于匹配策略</h5><ul><li>先在交换机上配置好终端的MAC地址和IP地址，并与VLAN 并联。只有符合条件的终端才能加入指定VLAN。符合策略的终端加入指定VLAN后，严禁修改IP地址和MAC地址，否则会导致终端从指定VLAN中退出。</li></ul><h3 id="CSMA-CD协议（总线型）">CSMA/CD协议（总线型）</h3><ul><li>CSDN/CD即载波侦听多路访问/冲突检测，是广播信道中采用一种随机访问技术的竞争型访问方法，具有多目标地址的特点，总线型网络传输数据</li><li><strong>四大特点（重点）</strong></li></ul><ol><li>​<strong>先听再发</strong></li><li>​<strong>边听边发</strong></li><li>​<strong>冲突停止</strong></li><li>​<strong>延迟后发</strong></li></ol><h3 id="PPP协议-单播">PPP协议(单播)</h3><ul><li><p>点对点通信是<strong>一对一</strong>通道，因此<strong>不会发生碰撞</strong>，因此比较简单，采用PPP协议；其中PPP协议就是用户计算机和ISP（互联网服务提供商）进行通信时使用的数据链路层的协议</p></li><li><p>PPP最初设计是为<strong>两个对等节点之间</strong>的IP流量传输提供一种封装协议。</p></li></ul><h3 id="CRC协议">CRC协议</h3><p>循环冗余检验:<a href="https://wangsong1111.gitee.io/blog/2022/01/07/CRC%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C/">例题</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 数据链路层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第三章 数据链路层（1）</title>
      <link href="/posts/948d221c/"/>
      <url>/posts/948d221c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1>计算机网络第三章 数据链路层（1）</h1><h2 id="数据链路层基础概论">数据链路层基础概论</h2><h3 id="数据链路层的概念">数据链路层的概念</h3><p>数据链路层是物理层和网络层之间的协议，提供相邻节点的可靠数据传输。</p><h3 id="帧的概念">帧的概念</h3><p><strong>概念</strong>：数据链路层的协议数据单元</p><p><strong>组成</strong>：</p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/img/image-20220107155333369.png" style="zoom:50%;" /><ol><li>帧头：源MAC地址、目的MAC地址（<strong>48位</strong>组成，每一个MAC地址都是独一无二的）、类型</li><li>数据</li><li>帧尾：校验</li></ol><h3 id="以太网数据帧中的MAC和LLC">以太网数据帧中的MAC和LLC</h3><p><strong>MAC（一种协议，对接物理层）</strong></p><ul><li>数据帧的封装/卸载，帧的寻址和识别，帧的接收语发送，链路的管理，帧的差错控制等。MAC子层的存在屏蔽了不同的物理链路层种类的差异性</li></ul><p><strong>LLC（对接网络层）</strong></p><ul><li>LLC子层的主要功能为传输可靠性保障和控制，数据包的分段与重组。数据包的顺序传播。</li></ul><h3 id="数据链路层的两种传播方式">数据链路层的两种传播方式</h3><ol><li>单播</li><li>广播</li></ol><h3 id="数据链路层的三个基本问题">数据链路层的三个基本问题</h3><ul><li>封装成帧</li><li>透明传输</li><li>差错检测: 奇数校验、偶数校验、CRC</li></ul><h3 id="局域网中的设备">局域网中的设备</h3><p><strong>1.集线器（Hub）：</strong></p><ul><li>物理层，主要是对接受到的信号进行整体放大，以扩大网络的传输距离。</li><li>独享带宽。</li></ul><p><strong>2.交换机（Switch）：</strong></p><ul><li>数据链路层，为接入交换机的任意两个网络节点提供独享的电信号通路。</li><li>共享带宽</li></ul><p><strong>3.网桥：</strong></p><ul><li>两个端口的交换机</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 数据链路层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第二章 物理层（2）</title>
      <link href="/posts/58567958/"/>
      <url>/posts/58567958/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1>物理层的基本通信技术</h1><h2 id="四种信道复用技术">四种信道复用技术</h2><p>复用技术概念：将多种不同的信号在同一信道上进行传输，复用技术主要在用于解决不同信号传输时应该如何区分。</p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/img/image-20220107142551219.png" alt="复用图" style="zoom:67%;" /><h3 id="频分复用-FDM">频分复用 FDM</h3><p>划分不同频率来进行并行传输</p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/img/image-20220107142752240.png" style="zoom:50%;" /><h3 id="时分复用TDM">时分复用TDM</h3><p>划分不同时间段来传输信号</p><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/img/image-20220107142913980.png" alt=""></p><h3 id="波分复用WDM">波分复用WDM</h3><p>根据光波的波长进行传输（合波器耦合）</p><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/img/image-20220107143103259.png" alt=""></p><h3 id="码分复用CDM">码分复用CDM</h3><p>在同一时间同一频率根据传输的数据码进行区分</p><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/img/image-20220107143514215.png" alt=""></p><h2 id="数据的传输方式">数据的传输方式</h2><h3 id="根据同时间传输的数量划分">根据同时间传输的数量划分</h3><ol><li>串行传输：使用一条数据线，将数据一位一位的一次传输。</li><li>并行传输：在多条并行信道上同时进行传输。</li></ol><h3 id="根据数据报文的双方行为划分">根据数据报文的双方行为划分</h3><ol><li>同步传输：同步传输的比特分组要大得多。它不是独立地发送每个字符，每个字符都有自己的开始位和停止位，而是把它们组合起来一起发送。我们将这些组合称为数据帧，或简称为帧。</li><li>异步传输：异步传输将比特分成小组进行传送，小组可以是8位的1个字符或更长。发送方可以在任何时刻发送这些比特组，而接收方从不知道它们会在什么时候到达。</li></ol><p><strong>同步与异步传输的区别</strong></p><ul><li>异步传输是面向字符的传输，而同步传输是面向比特的传输。</li><li>异步传输的单位是字符，而同步传输的单位是桢。</li><li>异步传输通过字符起止的开始和停止码抓住再同步的机会，而同步传输则是以数据中抽取同步信息。</li><li>异步传输对时序的要求较低，同步传输往往通过特定的时钟线路协调时序。</li><li>异步传输相对于同步传输效率较低。</li></ul><h3 id="通过传输的信号划分">通过传输的信号划分</h3><ol><li>基代传输：传输数字信号。</li><li>频带传输：传输模拟信号。（200-3400HZ）</li></ol><h3 id="传输方向划分">传输方向划分</h3><ol><li>单工</li><li>半双工</li><li>全双工</li></ol><h3 id="传输对象划分">传输对象划分</h3><ol><li>单播</li><li>组播</li><li>广播</li></ol><h3 id=""></h3>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 物理层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第二章 物理层（1）</title>
      <link href="/posts/4ae3d6b6/"/>
      <url>/posts/4ae3d6b6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1>第二章 物理层（1）</h1><h2 id="物理层的基本概念">物理层的基本概念</h2><h3 id="四大特征">四大特征</h3><ul><li><p>机械特征：接口是怎么样的</p></li><li><p>电气特征：用多少伏的电</p></li><li><p>功能特征：线路上电平电压的特征</p></li><li><p>过程特性：实现不同功能所发射信号的顺序</p></li></ul><h3 id="两种信号">两种信号</h3><ol><li>模拟信号：特定频段的信号，有更加丰富的表现形式，连续的</li><li>数字信号：不是1就是0。更强的抗干扰能力，离散的</li></ol><h3 id="调制和编码">调制和编码</h3><h4 id="调制：模拟信号转换">调制：模拟信号转换</h4><h4 id="编码：数字信号转换">编码：数字信号转换</h4><p>编码步骤：采样、量化、编码（编码包括曼彻斯特编码，差分曼彻斯特编码和翻转不归零（NRZI）码三种）</p><p><strong><a href="https://hanshuliang.blog.csdn.net/article/details/108021414">几种编码的解释</a></strong></p><h4 id="区别：">区别：</h4><ol><li>数据可以通过编码手段转换成数字信号，也可以通过调制手段将数据转换成模拟信号。</li><li>数字数据可以通过数字发送器转换成数字信号（编码），也可以通过调制器转换成模拟信号（调制）。</li><li>模拟数据可以通过PCM编码器转换成数字信号（编码），也可以通过放大器调制器转换成模拟信号（调制）。</li></ol><h3 id="传输介质">传输介质</h3><h4 id="双绞线（200-500m）">双绞线（200-500m）</h4><ol><li>屏蔽双绞线STP：抗干扰强，贵一些</li><li>非屏蔽双绞线UTP：抗干扰能力弱，便宜</li><li>制作标准：</li></ol><ul><li>568B：橙白、橙、绿白、蓝、蓝白、绿、棕白、棕</li><li>568A：13、26调换</li></ul><h4 id="光纤">光纤</h4><p>单模光纤：距离100KM</p><p>多模光纤：距离2KM，全发射传播，有损耗。</p><p><img src="https://gitee.com/WangSong1111/pic-go-image/raw/master/img/image-20220107141025870.png" alt="多模光纤折射"></p><h4 id="同轴电缆（淘汰）">同轴电缆（淘汰）</h4><h4 id="无线">无线</h4><p>无线型号频率：IEEE802.11</p><h3 id="三大部分">三大部分</h3><ol><li>源系统：发送数据的一端</li><li>传输系统：传输过程中的各种传输介质</li><li>目的系统：接受数据的一端</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 物理层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第一章：概念</title>
      <link href="/posts/6f10ebef/"/>
      <url>/posts/6f10ebef/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1>计算机网络概述</h1><h2 id="计算机网络的概念">计算机网络的概念</h2><h3 id="计算机网络的定义">计算机网络的定义</h3><p>将地理位置不同的具有独立的计算机通过通信线路实现资源共享</p><h3 id="计算机网络的组成">计算机网络的组成</h3><ul><li>通信子网：提供信息交换的网络节点和资源线路</li><li>资源子网：提供共享的软件资源和硬件资源</li></ul><h3 id="计算机网络的类型">计算机网络的类型</h3><h4 id="按照拓扑分类">按照拓扑分类</h4><ul><li>星型结构</li><li>树形结构</li><li>总线型结构</li><li>环形结构</li><li>网状结构</li></ul><h4 id="按照范围分类">按照范围分类</h4><ul><li>局域网 LAN</li><li>城域网 MAN</li><li>个人区域网 PAN</li><li>互联网 Internet</li></ul><h4 id="按照传输方式分类">按照传输方式分类</h4><ul><li>有线网络</li><li>无线网络</li><li>无线局域网</li><li>无线个域网</li></ul><h2 id="计算机网络体系结构">计算机网络体系结构</h2><h3 id="传输方式">传输方式</h3><h4 id="按照传输的方向划分">按照传输的方向划分</h4><ul><li>单工:只能单方向传输的工作模式</li><li>双工:在同一时间，线路上只能允许一个方向的数据通过</li><li>全双工:双方可以同行进行数据通信</li></ul><h4 id="按照传输的对象划分">按照传输的对象划分</h4><ul><li>单播 一对一</li><li>多播 一对多</li><li>广播 一对所有</li></ul><h4 id="数据交换">数据交换</h4><ul><li>电路交换</li><li>报文交换</li><li>分组交换</li></ul><h3 id="通信协议和体系结构">通信协议和体系结构</h3><h4 id="语法协议三要素">语法协议三要素</h4><ul><li>语法</li><li>语义</li><li>时序</li></ul><h4 id="OSI参考模型-（下层为上层服务）">OSI参考模型 （下层为上层服务）</h4><ul><li><p>应用层：使用应用程序通过网络服务</p></li><li><p>表示层：处理交互数据的表示方式</p></li><li><p>会话层： 负责维护通信中两个节点之间的会话建立维护和断开，以及数据的交换</p></li><li><p>传输层： 提供端到端的通信</p></li><li><p>网络层：单位:分组，提供点到点的通信</p></li><li><p>数据链路层： 单位：帧，两个节点之间通信（不是两个电脑之间通信）</p></li><li><p>物理层：单位bit，物理线路传输介质</p><h4 id="TCP-IP-参考-模型">TCP/IP 参考 模型</h4></li><li><p>网络接口层 ： 数据层和数据链路层</p></li><li><p>网际层： 网络层</p></li><li><p>传输层</p></li><li><p>应用层： 会话层、表示层、应用层</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
